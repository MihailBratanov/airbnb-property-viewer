#BlueJ class context
comment0.target=Calculator
comment0.text=\n\ This\ class\ is\ where\ all\ statistical\ computations\ take\ place.\n\n\ @author\ Haiyun\ Zou,\ Ka\ Wang\ Sin,\ Mihail\ Bratanov\ and\ Terry\ Phung\n\ @version\ 2019.03.29\n\n\ 18-19\ 4CCS1PPA\ Programming\ Practice\ and\ Applications\n\ Term\ 2\ Coursework\ 4\ -\ London\ Property\ Marketplace\n\ Created\ by\ Haiyun\ Zou,\ Ka\ Wang\ Sin,\ Mihail\ Bratanov\ and\ Terry\ Phung\n\ Student\ ID\:\ 1828556,\ 1850162,\ 1838362,\ 1833386\n\ k-number\:\ k1895418,\ k1802265,\ k1888765,\ k1895389\n
comment1.params=
comment1.target=Calculator()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Calculator\n
comment2.params=dataToDoStatsOn
comment2.target=double\ calculateAverageViews(javafx.collections.ObservableList)
comment2.text=\n\ A\ methid\ to\ calculate\ the\ average\ reviews\n\ @param\ dataToDoStatsOn\n\ @return\ the\ average\n
comment3.params=dataToDoStatsOn
comment3.target=int\ calculateAvailability(javafx.collections.ObservableList)
comment3.text=\n\ A\ method\ to\ get\ the\ amount\ of\ available\ properties\n\ @param\ dataToDoStatsOn\n\ @return\ amount\ of\ available\ properties\n
comment4.params=dataToDoStatsOn
comment4.target=int\ calculateRoomType(javafx.collections.ObservableList)
comment4.text=\nA\ method\ to\ calculate\ the\ amount\ of\ properties\ which\ are\ not\ private\ rooms\n\ @param\ dataToDoStatsOn\n\ @return\ the\ amount\ of\ properties\n
comment5.params=dataToDoStatsOn
comment5.target=java.lang.String\ calculateMostExpensiveBorough(javafx.collections.ObservableList)
comment5.text=\n\ A\ method\ that\ calculates\ the\ most\ expensive\ borough\n\ @param\ dataToDoStatsOn\n\ @return\ name\ of\ borough\n
comment6.params=dataToDoStatsOn
comment6.target=java.util.HashMap\ calculateMostRecentListing(javafx.collections.ObservableList)
comment6.text=\n\ A\ method\ to\ calculate\ the\ most\ recent\ listing\n\ @param\ dataToDoStatsOn\n\ @return\ a\ hashmap\ with\ the\ listing\ id's\ and\ dates\n
comment7.params=dataToDoStatsOn
comment7.target=java.util.HashMap\ calculateBusiestMonth(javafx.collections.ObservableList)
comment7.text=\n\ Calculates\ the\ month\ with\ most\ listings\n\ @param\ dataToDoStatsOn\n\ @return\ a\ hashmap\ of\ each\ month\ mapped\ to\ the\ amount\ of\ listings\n
comment8.params=dataToDoStatsOn
comment8.target=java.util.HashMap\ calculateMostPopulatedBorough(javafx.collections.ObservableList)
comment8.text=\n\ Calculates\ the\ borough\ with\ most\ listings\n\ @param\ dataToDoStatsOn\n\ @return\ a\ hashmap\ of\ the\ borough\ mapped\ to\ the\ count\ of\ listings\n
numComments=9
